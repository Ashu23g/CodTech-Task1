import re
import random
import string

class PasswordStrengthChecker:
    
    def __init__(self):
        # Criteria for password strength
        self.length_criteria = 8
        self.uppercase_criteria = 1
        self.lowercase_criteria = 1
        self.digit_criteria = 1
        self.special_char_criteria = 1
        self.special_characters = "@#$%^&+=!"
        self.password_score = 0

    def check_password_strength(self, password):
        self.password_score = 0
        feedback = []
        
        # Check password length
        if len(password) >= self.length_criteria:
            self.password_score += 1
        else:
            feedback.append(f"Password must be at least {self.length_criteria} characters long.")
        
        # Check for lowercase letters
        if re.search("[a-z]", password):
            self.password_score += 1
        else:
            feedback.append("Password must contain at least one lowercase letter.")
        
        # Check for uppercase letters
        if re.search("[A-Z]", password):
            self.password_score += 1
        else:
            feedback.append("Password must contain at least one uppercase letter.")
        
        # Check for digits
        if re.search("[0-9]", password):
            self.password_score += 1
        else:
            feedback.append("Password must contain at least one digit.")
        
        # Check for special characters
        if re.search(f"[{re.escape(self.special_characters)}]", password):
            self.password_score += 1
        else:
            feedback.append(f"Password must contain at least one special character from {self.special_characters}.")
        
        return feedback

    def generate_strong_password(self):
        # Generate a strong password that meets all criteria
        password = []
        password.append(random.choice(string.ascii_lowercase))
        password.append(random.choice(string.ascii_uppercase))
        password.append(random.choice(string.digits))
        password.append(random.choice(self.special_characters))
        
        # Fill the remaining length of the password with random characters
        while len(password) < self.length_criteria:
            password.append(random.choice(string.ascii_letters + string.digits + self.special_characters))
        
        # Shuffle the list to ensure randomness
        random.shuffle(password)
        
        return ''.join(password)

    def classify_strength(self):
        # Classification based on score
        if self.password_score == 5:
            return "Very Strong"
        elif self.password_score == 4:
            return "Strong"
        elif self.password_score == 3:
            return "Moderate"
        elif self.password_score == 2:
            return "Weak"
        else:
            return "Very Weak"


def main():
    checker = PasswordStrengthChecker()
    
    # Take user input
    user_password = input("Enter a password to check its strength: ")
    
    # Check password strength and provide feedback
    feedback = checker.check_password_strength(user_password)
    strength = checker.classify_strength()
    
    print(f"\nPassword Strength: {strength}")
    
    if feedback:
        print("\nIssues with your password:")
        for issue in feedback:
            print(f" - {issue}")
        print("\nSuggested Strong Password:")
        print(checker.generate_strong_password())
    else:
        print("Your password is strong!")


if __name__ == "__main__":
    main()
